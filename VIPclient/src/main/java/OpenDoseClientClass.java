import org.carmin.client.*;
import org.carmin.client.api.DefaultApi;
import org.carmin.client.model.Execution;
import org.carmin.client.model.Path;
import org.carmin.client.model.Pipeline;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

/**
 * Created by gmathieu
 * Based on a squeleton file Created by abonnet on 4/23/18.
 */

public class OpenDoseClientClass {

    public static void main(String[] args) throws ApiException {

        /********** INIT API CLIENT ***********/
        /*
        ApiClient vipApiClient = new ApiClient();
        vipApiClient.setApiKey("l6uf3opn55b5ltrkok6pd7olll");// Key GM
        vipApiClient.setBasePath("http://vip.creatis.insa-lyon.fr/rest");
        DefaultApi vipApi = new DefaultApi(vipApiClient);
        */

        /********** PRELIMINARY TEST ***********/

        // List available pipelines
    /*
        List<Pipeline> pipelineList = vipApi.listPipelines(null, null, null);
        System.out.println(pipelineList);
    */

        // Get info on a given pipeline (here: GateLab/0.4.7)
        // Allows to know (amongst other things) name and type of expected parameters
    /*
        Pipeline pipelineInfo = vipApi.getPipeline("GateLab%2F0.4.7");
        System.out.println(pipelineInfo);
    */


    /********** CALL GATELAB WITH INPUT PARAMS ***********/

        // Create directory and upload input zip file (alternatively, we can use an input file generated by GateLab through the portal)
        //vipApi.createDirectory("/vip/Home/2018-07-23_GateLabAPITest/");
        //vipApi.uploadPathBinary("/vip/Home/myGateSimus/inputs/GateInputU07.zip", new File("/home/gate/GateInputU07.zip"));

        String executionName    = new String();

        // build list of source organs from input data
        ArrayList<String> organsList = new ArrayList<String>();
        organsList.add ("liver");
        organsList.add ("kidney");
        organsList.add ("heart");
        /*Scanner s1 = null;
        try {
            s1 = new Scanner(new File("/home/gate/opendose/tests 2018-07/InputData/data/ICRP_AM_LabelsToMaterials.txt"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        while (s1.hasNextLine()){
            organsList.add(s1.next());
            s1.nextLine();
        }
        s1.close();*/

        // build list of particle types
        ArrayList<String> particlesList = new ArrayList<String>();
        particlesList.add ("gamma");
        particlesList.add ("electron");

        // build list of energy levels from input data
        ArrayList<String> energiesList = new ArrayList<String>();
        energiesList.add("0.01200");
        energiesList.add("0.50000");
        energiesList.add("10.0000");
        /*Scanner s2 = null;
        try {
            s2 = new Scanner(new File("/home/gate/opendose/tests 2018-07/InputData/data/energies_all.dat"));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        while (s2.hasNext()){
            energiesList.add(s2.next());
        }
        s2.close();*/

        // Set pipeline & input parameters
        /*Execution execution = new Execution();
        execution.setPipelineIdentifier("GateLab/0.4.7");
        Map<String, Object> inputValues = new HashMap<>();

        inputValues.put("CPUestimation", "1");
        inputValues.put("GateInput", "/vip/Home/myGateSimus/inputs/GateInputU07.zip");
        inputValues.put("GateRelease", "/grid/biomed/creatis/vip/data/groups/GateLab/releases/gate_release_8.1p01_light.tar.gz");
        inputValues.put("NumberOfParticles", "10000");
        inputValues.put("ParallelizationType", "static"); */

        // loop over all organs find in input matrix
        for (String organ : organsList) {
            // loop over all particle types
            for (String particle : particlesList) {
                // loop over all energy levels
                for (String energy : energiesList) {
                    executionName = "OpenDose_" + organ + "_" + particle + "_" + energy;
                    System.out.println(executionName);
                    // pass organ, particle and energy params to the pipeline

                    // setup and launch execution
                    /*execution.setInputValues(inputValues);
                    execution.setName(executionName);
                    execution = vipApi.initExecution(execution);
                    System.out.println(execution.getIdentifier());*/
                }
            }
        }








    }


}
